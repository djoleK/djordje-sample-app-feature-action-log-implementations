/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.phoenixnap.bmc.api;

import com.phoenixnap.bmc.api.models.Customer;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-06-17T12:39:04.897924+02:00[Europe/Belgrade]")
@Validated
@Api(value = "customers", description = "the customers API")
public interface CustomersApi {

    default CustomersApiDelegate getDelegate() {
        return new CustomersApiDelegate() {};
    }

    /**
     * POST /customers : Create a customer
     * Creates a new instance of a &#x60;customer&#x60;.
     *
     * @param customer A new &#x60;customer&#x60; to be created. (required)
     * @return Successful response. (status code 201)
     */
    @ApiOperation(value = "Create a customer", nickname = "createCustomer", notes = "Creates a new instance of a `customer`.", response = Customer.class, tags={ "customer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successful response.", response = Customer.class) })
    @PostMapping(
        value = "/customers",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Customer> createCustomer(@ApiParam(value = "A new `customer` to be created." ,required=true )  @Valid @RequestBody Customer customer) {
        return getDelegate().createCustomer(customer);
    }


    /**
     * DELETE /customers/{id} : Delete a customer
     * Deletes an existing &#x60;customer&#x60;.
     *
     * @param id A unique identifier for a &#x60;customer&#x60;. (required)
     * @return Successful response. (status code 204)
     *         or Internal server error. (status code 500)
     */
    @ApiOperation(value = "Delete a customer", nickname = "deleteCustomer", notes = "Deletes an existing `customer`.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Successful response."),
        @ApiResponse(code = 500, message = "Internal server error.") })
    @DeleteMapping(
        value = "/customers/{id}"
    )
    default ResponseEntity<Void> deleteCustomer(@ApiParam(value = "A unique identifier for a `customer`.",required=true) @PathVariable("id") String id) {
        return getDelegate().deleteCustomer(id);
    }


    /**
     * GET /customers : List All customers
     * Gets a list of all &#x60;customer&#x60; entities.
     *
     * @return Successful response - returns an array of &#x60;customer&#x60; entities. (status code 200)
     *         or No customers found. (status code 204)
     *         or Internal server error. (status code 500)
     */
    @ApiOperation(value = "List All customers", nickname = "getAllCustomers", notes = "Gets a list of all `customer` entities.", response = Customer.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response - returns an array of `customer` entities.", response = Customer.class, responseContainer = "List"),
        @ApiResponse(code = 204, message = "No customers found."),
        @ApiResponse(code = 500, message = "Internal server error.") })
    @GetMapping(
        value = "/customers",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Customer>> getAllCustomers() {
        return getDelegate().getAllCustomers();
    }


    /**
     * GET /customers/{id} : Get a customer
     * Gets the details of a single instance of a &#x60;customer&#x60;.
     *
     * @param id A unique identifier for a &#x60;customer&#x60;. (required)
     * @return Successful response - returns a single &#x60;customer&#x60;. (status code 200)
     *         or Unsuccessful response - no customer found with provided id. (status code 404)
     */
    @ApiOperation(value = "Get a customer", nickname = "getCustomerById", notes = "Gets the details of a single instance of a `customer`.", response = Customer.class, tags={ "customer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response - returns a single `customer`.", response = Customer.class),
        @ApiResponse(code = 404, message = "Unsuccessful response - no customer found with provided id.") })
    @GetMapping(
        value = "/customers/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Customer> getCustomerById(@ApiParam(value = "A unique identifier for a `customer`.",required=true) @PathVariable("id") String id) {
        return getDelegate().getCustomerById(id);
    }


    /**
     * PUT /customers/{id} : Update a customer
     * Updates an existing &#x60;customer&#x60;.
     *
     * @param id A unique identifier for a &#x60;customer&#x60;. (required)
     * @param customer Updated &#x60;customer&#x60; information. (required)
     * @return Successful response. (status code 202)
     *         or Customer not found. (status code 404)
     */
    @ApiOperation(value = "Update a customer", nickname = "updateCustomer", notes = "Updates an existing `customer`.", response = Customer.class, tags={ "customer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Successful response.", response = Customer.class),
        @ApiResponse(code = 404, message = "Customer not found.") })
    @PutMapping(
        value = "/customers/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Customer> updateCustomer(@ApiParam(value = "A unique identifier for a `customer`.",required=true) @PathVariable("id") String id,@ApiParam(value = "Updated `customer` information." ,required=true )  @Valid @RequestBody Customer customer) {
        return getDelegate().updateCustomer(id, customer);
    }

}
